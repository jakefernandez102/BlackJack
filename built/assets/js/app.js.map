{"version":3,"file":"app.js","names":["divField","document","querySelector","headerAlert","btnAskNewGame","btnAskForCard","btnAskStop","btn2Players","btn3Players","btn4Players","deck","typeCards","specials","playersPoints","playerTurn","addEventListener","initDeck","createFields","cleanFields","firstChild","removeChild","disabled","cleanHTML","console","log","whosNext","giveTurn","printCardHTML","askForCard","turnCPU","validateTurn","length","turn","cardField","querySelectorAll","style","color","numberOfPlayers","crearDeck","i","push","field","createElement","classList","add","innerHTML","appendChild","fieldCpu","typeCard","special","_","shuffle","pop","cardValue","card","value","substring","isNaN","validateAValue","confirm","playerScore","validatePlayerPoints","textContent","printPlayerCards","divPlayerCards","playerCard","src","points","addPointsPlayers","printCpuCards","cpuCard","minimumPoints","cpuPoints","validateResults","printAlert","message","type","alert","setTimeout","remove","forEach","elem"],"sources":["app.js"],"mappings":"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","sourcesContent":["/***\r\n * 2C c(rubs\r\n * 2D diamonds\r\n * 2H hearts\r\n * 2S spades\r\n */\r\n\r\n( () => {\r\n    'use strict'\r\n    const divField = document.querySelector( '.field' );\r\n\r\n    const headerAlert = document.querySelector( '.header' ),\r\n        btnAskNewGame = document.querySelector( '#btn-newGame' ),\r\n        btnAskForCard = document.querySelector( '#btn-askCard' ),\r\n        btnAskStop = document.querySelector( '#btn-stop' ),\r\n        btn2Players = document.querySelector( '#btn-2Players' ),\r\n        btn3Players = document.querySelector( '#btn-3Players' ),\r\n        btn4Players = document.querySelector( '#btn-4Players' );\r\n\r\n    let deck = [],\r\n        typeCards = [ 'C', 'D', 'H', 'S' ],\r\n        specials = [ 'A', 'J', 'Q', 'K' ],\r\n        playersPoints = [],\r\n        playerTurn = 0;\r\n\r\n    //Events\r\n    const initApp = () => {\r\n        document.addEventListener( 'DOMContentLoaded', () => {\r\n\r\n            initDeck();\r\n            createFields();\r\n            btn2Players.addEventListener( 'click', () => {\r\n                cleanFields();\r\n                initDeck( 3 );\r\n                createFields( 2 );\r\n            } );\r\n            btn3Players.addEventListener( 'click', () => {\r\n                cleanFields();\r\n                initDeck( 4 );\r\n                createFields( 3 );\r\n            } );\r\n            btn4Players.addEventListener( 'click', () => {\r\n                cleanFields();\r\n                initDeck( 5 )\r\n                createFields( 4 );\r\n            } );\r\n\r\n        } );\r\n    };\r\n    initApp();\r\n\r\n    const cleanFields = () => {\r\n        while ( divField.firstChild ) {\r\n            divField.removeChild( divField.firstChild )\r\n        }\r\n    }\r\n\r\n    btnAskNewGame.addEventListener( 'click', () => {\r\n        btn2Players.disabled = false;\r\n        btn3Players.disabled = false;\r\n        btn4Players.disabled = false;\r\n\r\n        btnAskForCard.disabled = false;\r\n        btnAskStop.disabled = false;\r\n        // printCardHTML( askForCard() );\r\n        cleanHTML();\r\n        cleanFields();\r\n        createFields();\r\n    } );\r\n\r\n    btnAskForCard.addEventListener( 'click', () => {\r\n        console.log( playersPoints );\r\n        btn2Players.disabled = true;\r\n        btn3Players.disabled = true;\r\n        btn4Players.disabled = true;\r\n\r\n        let whosNext = giveTurn();\r\n\r\n        // printCardHTML( askForCard() );\r\n        printCardHTML( askForCard(), whosNext );\r\n        // printCardHTML( 'AD' );\r\n    } );\r\n\r\n    btnAskStop.addEventListener( 'click', () => {\r\n\r\n        btnAskForCard.disabled = true;\r\n        btnAskStop.disabled = true;\r\n        turnCPU( playersPoints[ 0 ] );\r\n\r\n    } );\r\n\r\n    const giveTurn = () => {\r\n        console.log( 'Turno giveTurn', playerTurn );\r\n\r\n        validateTurn( playerTurn );\r\n\r\n        return playerTurn >= playersPoints.length - 1 ? playerTurn = 0\r\n            : playerTurn >= 0 ? playerTurn++ : playerTurn;\r\n\r\n    };\r\n    const validateTurn = ( turn ) => {\r\n        console.log( { turn } );\r\n        const cardField = document.querySelectorAll( '.cardField > h1' );\r\n        console.log( cardField[ ( playersPoints.length - 2 ) ] );\r\n        cardField[ turn ].style.color = 'yellow';\r\n        if ( turn > 0 ) {\r\n            cardField[ ( turn - 1 ) ].style.color = 'white';\r\n        }\r\n        if ( turn === 0 ) {\r\n            cardField[ ( playersPoints.length - 2 ) ].style.color = 'white';\r\n        }\r\n\r\n    };\r\n\r\n    //Creando un nuevo deck\r\n    const initDeck = ( numberOfPlayers = 2 ) => {\r\n\r\n        deck = crearDeck();\r\n        playersPoints = []\r\n        for ( let i = 0; i < numberOfPlayers; i++ ) {\r\n            playersPoints.push( 0 );\r\n        };\r\n        console.log( playersPoints );\r\n\r\n    }\r\n\r\n    const createFields = ( numberOfPlayers = 1 ) => {\r\n\r\n        for ( let i = 0; i < numberOfPlayers; i++ ) {\r\n\r\n            const field = document.createElement( 'DIV' );\r\n            field.classList.add( 'row', 'container-fluid' );\r\n            field.innerHTML = `\r\n                <div class=\"col cardField\">\r\n                    <h1>Player ${ i + 1 }: <small id=\"playerScore\">0</small></h1>\r\n                    <div id=\"player-cards\" class=\"divCards\">\r\n    \r\n                    </div>\r\n                </div>\r\n            `;\r\n            divField.appendChild( field );\r\n        }\r\n        const fieldCpu = document.createElement( 'DIV' );\r\n        fieldCpu.classList.add( 'row', 'container-fluid' );\r\n        fieldCpu.innerHTML = `\r\n            <div class=\"col cardField\">\r\n                <h1>CPU: <small id=\"cpuScore\">0</small></h1>\r\n                <div id=\"cpu-cards\" class=\"divCards\">\r\n\r\n                </div>\r\n            </div>\r\n        `;\r\n        divField.appendChild( fieldCpu );\r\n\r\n    };\r\n\r\n    const crearDeck = () => {\r\n\r\n        for ( let i = 2; i <= 10; i++ ) {\r\n            for ( const typeCard of typeCards ) {\r\n                deck.push( i + typeCard );\r\n            }\r\n        }\r\n        for ( const typeCard of typeCards ) {\r\n            for ( const special of specials ) {\r\n                deck.push( special + typeCard )\r\n            }\r\n        }\r\n\r\n        return _.shuffle( deck );\r\n    };\r\n\r\n    //Tomando una carta\r\n    const askForCard = () => {\r\n\r\n        if ( deck.length === 0 ) {\r\n            throw 'There are no more cards'\r\n        }\r\n        return deck.pop();\r\n    };\r\n\r\n    //retornando el valor de la carta tomada en askforcard()\r\n    const cardValue = ( card ) => {\r\n        //Podria usar una expresion regular\r\n        const value = card.substring( 0, ( card.length - 1 ) );\r\n        return ( !isNaN( value ) ) ? value * 1\r\n            : ( value === 'A' ) ? validateAValue( value ) : 10;\r\n\r\n    };\r\n\r\n    //Agregando opcion al player para decidir valor de A puede ser 11 o 1\r\n    const validateAValue = ( value = 1 ) => {\r\n        value = confirm( 'Value for A: 11 -> confirm or 1 -> cancel' ) ? 11 : 1;\r\n        return value;\r\n    };\r\n\r\n\r\n\r\n    //Imprimiendo cartas en el lado del jugador\r\n    const printCardHTML = ( card, turn ) => {\r\n\r\n        if ( playerTurn === playersPoints.length - 1 ) {\r\n            playerTurn = 0;\r\n        }\r\n        console.log( { turn } );\r\n        const playerScore = document.querySelectorAll( 'small' );\r\n        playersPoints[ turn ] += cardValue( card );\r\n        // playerPoints += 21;\r\n        validatePlayerPoints( playersPoints[ turn ], turn );\r\n\r\n        playerScore[ turn ].textContent = playersPoints[ turn ];\r\n\r\n        printPlayerCards( card, turn );\r\n\r\n    };\r\n\r\n\r\n    const printPlayerCards = ( card, turn ) => {\r\n        const divPlayerCards = document.querySelectorAll( '.divCards' );\r\n        const playerCard = document.createElement( 'img' );\r\n\r\n        playerCard.classList.add( 'carta' );\r\n        playerCard.src = `assets/img/${ card }.png`;\r\n\r\n\r\n        divPlayerCards[ turn ].appendChild( playerCard );\r\n    }\r\n\r\n    const validatePlayerPoints = ( points, turn ) => {\r\n        if ( points > 21 ) {\r\n\r\n            btnAskForCard.disabled = true;\r\n            btnAskStop.disabled = true;\r\n            turnCPU( points, turn );\r\n        } else if ( points === 21 ) {\r\n\r\n            btnAskForCard.disabled = true;\r\n            btnAskStop.disabled = true;\r\n            turnCPU( points, turn );\r\n        }\r\n    }\r\n\r\n    const addPointsPlayers = ( card, turn ) => {\r\n        const playerScore = document.querySelectorAll( 'small' );\r\n        playersPoints[ turn ] += cardValue( card );\r\n        playerScore[ turn ].textContent = playersPoints[ turn ];\r\n        return playersPoints[ turn ]\r\n    };\r\n\r\n\r\n    //CPU turn\r\n    const printCpuCards = ( card, turn ) => {\r\n        const divPlayerCards = document.querySelectorAll( '.divCards' );\r\n        const cpuCard = document.createElement( 'img' );\r\n        cpuCard.classList.add( 'carta' );\r\n        cpuCard.src = `assets/img/${ card }.png`;\r\n        console.log( { turn } );\r\n        divPlayerCards[ turn ].appendChild( cpuCard );\r\n\r\n    }\r\n    const turnCPU = ( minimumPoints, turn ) => {\r\n        let cpuPoints = 0;\r\n        do {\r\n            let card = askForCard();\r\n\r\n            cpuPoints = addPointsPlayers( card, ( playersPoints.length - 1 ) );\r\n\r\n            printCpuCards( card, ( playersPoints.length - 1 ) );\r\n\r\n        } while ( ( cpuPoints < minimumPoints ) && ( minimumPoints <= 21 ) );\r\n        validateResults( cpuPoints, minimumPoints, turn );\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const printAlert = ( message, type = '' ) => {\r\n        const alert = document.createElement( 'p' );\r\n        if ( type == 'error' ) {\r\n            alert.classList.add( 'p-4', 'bg-danger', 'text-center', 'text-light' );\r\n            alert.textContent = message;\r\n        } else if ( type === 'tie' ) {\r\n            alert.classList.add( 'p-4', 'bg-warning', 'text-center', 'text-light' );\r\n            alert.textContent = message;\r\n        } else {\r\n            alert.classList.add( 'p-4', 'bg-success', 'text-center', 'text-light' );\r\n            alert.textContent = message;\r\n        }\r\n        setTimeout( () => {\r\n            alert.remove();\r\n        }, 3000 );\r\n        return headerAlert.appendChild( alert );\r\n    };\r\n\r\n    const cleanHTML = () => {\r\n        const playerScore = document.querySelectorAll( 'small' );\r\n        const divPlayerCards = document.querySelectorAll( '.divCards' );\r\n\r\n        playerScore.forEach( elem => elem.textContent = 0 )\r\n\r\n        initDeck();\r\n\r\n        for ( const i in divPlayerCards ) {\r\n\r\n            while ( divPlayerCards[ i ].firstChild ) {\r\n                divPlayerCards[ i ].removeChild( divPlayerCards[ i ].firstChild );\r\n            }\r\n            while ( divPlayerCards[ i ].firstChild ) {\r\n                divPlayerCards[ i ].removeChild( divPlayerCards[ i ].firstChild );\r\n            }\r\n        }\r\n    }\r\n\r\n    const validateResults = ( cpuPoints, minimumPoints, turn ) => {\r\n\r\n        if ( minimumPoints === 21 && cpuPoints === 21 ) {\r\n            return printAlert( `Is a tie!!!`, 'tie' );\r\n        }\r\n        if ( minimumPoints > 21 ) {\r\n            return printAlert( `Player ${ turn + 1 } You loose!!!`, 'error' );\r\n        }\r\n        if ( cpuPoints === 21 ) {\r\n            return printAlert( `Player ${ turn + 1 } You loose!!!`, 'error' );\r\n        }\r\n\r\n        if ( cpuPoints > minimumPoints && cpuPoints < 21 ) {\r\n            return printAlert( `Player ${ turn + 1 } You loose!!!`, 'error' );\r\n        }\r\n\r\n        if ( minimumPoints === cpuPoints ) {\r\n            return printAlert( `Player ${ turn + 1 } You loose!!!`, 'error' );\r\n        }\r\n        if ( minimumPoints === cpuPoints ) {\r\n            return printAlert( `Player ${ turn + 1 } You loose!!!`, 'error' );\r\n        }\r\n        if ( cpuPoints > 21 ) {\r\n            return printAlert( `Player ${ turn + 1 } You win!!!` );\r\n        }\r\n        if ( minimumPoints < 21 && cpuPoints > 21 ) {\r\n            return printAlert( `Player ${ turn + 1 } You win!!!` );\r\n        }\r\n\r\n\r\n    }\r\n} )();\r\n"]}